#include "Adafruit_FONA.h"
#include<string.h>


#define FONA_RX 2
#define FONA_TX 3
#define FONA_RST 4




#include <SoftwareSerial.h>
SoftwareSerial fonaSS = SoftwareSerial(FONA_TX, FONA_RX);
SoftwareSerial *fonaSerial = &fonaSS;


Adafruit_FONA fona = Adafruit_FONA(FONA_RST);




uint8_t readline(char *buff, uint8_t maxbuff, uint16_t timeout = 0);


uint8_t type =FONA808_V2;
/************************CO sensor************************************/
#define         MQ_PIN                       (1)     //define which analog input channel you are going to use
#define         RL_VALUE                     (1)     //define the load resistance on the board, in kilo ohms
#define         RO_CLEAN_AIR_FACTOR          (3.3)  //RO_CLEAR_AIR_FACTOR=(Sensor resistance in clean air)/RO,
#define         GAS_CO                       (1)
                                                    //which is derived from the chart in datasheet
 
/***********************Software Related Macros************************************/
#define         CALIBARAION_SAMPLE_TIMES     (50)    //define how many samples you are going to take in the calibration phase
#define         CALIBRATION_SAMPLE_INTERVAL  (500)   //define the time interal(in milisecond) between each samples in the
                                                     //cablibration phase
#define         READ_SAMPLE_INTERVAL         (50)    //define how many samples you are going to take in normal operation
#define         READ_SAMPLE_TIMES            (5)     //define the time interal(in milisecond) between each samples in 
                                                     //normal operation
 
/**********************Application Related Macros**********************************/
int co2ppm = 0;                               //int for calculated ppm


 
float           COCurve[3]  =  {0.5,0.21,-4.79};   
float           Ro           =  3.65;              


#define anInput     A2                        //analog feed from 
#define digTrigger   3                        //digital feed from 
#define co2Zero     55                        //calibrated CO2 0 level
String  nerestring;






int microphonValue = 0;
int n_Samples = 1000; // numero de muestras para promediar
int sensorValueEskala = 0;
int sensorValue = 0;


void setup() {
  
  pinMode(anInput,INPUT);                     //MQ135 analog feed set for input
  Serial.begin(115200);
  Serial.println(F("FONA basic test"));
  Serial.println(F("Initializing....(May take 3 seconds)"));


  fonaSerial->begin(4800);
  if (! fona.begin(*fonaSerial)) {
    Serial.println(F("Couldn't find FONA"));
    while (1);
  }
  type = fona.type();
  Serial.println(F("FONA is OK"));
  Serial.print(F("Found "));
  switch (type) {
    case FONA800L:
      Serial.println(F("FONA 800L")); break;
    case FONA800H:
      Serial.println(F("FONA 800H")); break;
    case FONA808_V1:
      Serial.println(F("FONA 808 (v1)")); break;
    case FONA808_V2:
      Serial.println(F("FONA 808 (v2)")); break;
    case FONA3G_A:
      Serial.println(F("FONA 3G (American)")); break;
    case FONA3G_E:
      Serial.println(F("FONA 3G (European)")); break;
    default: 
      Serial.println(F("???")); break;
  }


 
  
}
void loop() {
 
     // Print module IMEI number.
  char imei[16] = {0}; // MUST use a 16 character buffer for IMEI!
  uint8_t imeiLen = fona.getIMEI(imei);
  if (imeiLen > 0) {
    Serial.print("Module IMEI: "); 
Serial.println(imei);
  }


  fona.setGPRSNetworkSettings(F("internet.euskaltel.mobi"), F("CLIENTE"), F("EUSKALTEL"));
  fona.setHTTPSRedirect(true);
 // Unlock the SIM with a PIN code
        char PIN[4]= "4998";
        Serial.println(PIN);
        Serial.print(F("Unlocking SIM card: "));
        if (! fona.unlockSIM(PIN)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        
          if (!fona.enableGPS(true))
          Serial.println(F("Failed to turn on"));
          delay (4000);
          
          if (!fona.enableGPRS(false))
          Serial.println(F("Failed to turn off"));
          delay (4000);
          
          if (!fona.enableGPRS(true))
          Serial.println(F("Failed to turn on"));
          delay (4000);
          
      float latitude, longitude, speed_kph, heading, speed_mph, altitude;
        boolean gps_success = fona.getGPS(&latitude, &longitude, &speed_kph, &heading, &altitude);
        
        if (gps_success) {


        Serial.println(latitude, 6);
        
        Serial.println(longitude, 6);
        }
        


        delay (2000);
        
         Serial.print("CO:"); 
         Serial.print(MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_CO) );
         Serial.print( "ppm" );
         Serial.print("    ");   
         delay(200);
         CO2();
         
   delay (4000);




 float batezBestekoa = getbatezBestekoa (n_Samples);
  //Serial.print ("sensorValueEskala: ");
  //Serial.println (sensorValueEskala);
  Serial.print ("batezBestekoa: ");
  Serial.println (batezBestekoa);
int dB_tan = 20 * log (batezBestekoa);
  Serial.print ("dB_tan: ");
  Serial.println (dB_tan);








  delay (4000);






   
         Serial.println(dB_tan);
         delay(6000);
        uint16_t statuscode;
        int16_t length;
        char topollution[]="https://topollution.herokuapp.com/api/device?device_id=";
        char id[]="1";
        char lati[]="&latitud="; 
        char longi[]="&longitud="; 
        char dbs[]="&dbs=";
        char co2[]="&co2=";
        char co[]="&co=";
        char net[]="&net=lora";
        char url[180];
        char data[180];
        nerestring += String(topollution);
        nerestring += String(id);
        nerestring += String(lati);
        nerestring += String(latitude, 6);
        nerestring += String(longi);
        nerestring += String(longitude, 6);
        nerestring += String(dbs);
        nerestring += String(dB_tan);
        nerestring += String(co2);
        nerestring += String(co2ppm);
        nerestring += String(co);
        nerestring += String(MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_CO));
        nerestring += String(net);
        delay(1000);
        
       nerestring.toCharArray(url, 180);
        delay (6000);


  
        Serial.println(F("URL to post (topollution.herokuapp.com/api/device?device_id&latitud&longitud&dbs&co2&co&net):"));
        Serial.print(F("")); 
        Serial.println(url);
        delay(8000);
        Serial.println(F("Data to post (e.g. \"foo\" or \"{\"simple\":\"json\"}\"):"));
       
        Serial.println(data);


        Serial.println(F("****"));
        if (!fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length)) {
          Serial.println("Failed!");
          
        }
        while (length > 0) {
          while (fona.available()) {
            char c = fona.read();


#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
            loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
            UDR0 = c;
#else
            Serial.write(c);
#endif
            length--;
            if (! length) break;
          }
        }
        Serial.println(F("\n****"));
        fona.HTTP_POST_end();
        
  
delay (60000);
}
 
float MQResistanceCalculation(int raw_adc){
  return ( ((float)RL_VALUE*(1023-raw_adc)/raw_adc));
} 
float MQCalibration(int mq_pin){
  int i;
  float val=0;
for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {            //take multiple samples
    val += MQResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBARAION_SAMPLE_TIMES;                   //calculate the average value
  val = val/RO_CLEAN_AIR_FACTOR;                        //divided by RO_CLEAN_AIR_FACTOR yields the Ro 
  return val; 
}


float MQRead(int mq_pin)
{
  int i;
  float rs=0; 
  for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  } 
  rs = rs/READ_SAMPLE_TIMES; 
  return rs;  
} 
int MQGetGasPercentage(float rs_ro_ratio, int gas_id){
  if ( gas_id == GAS_CO ) {
     return MQGetPercentage(rs_ro_ratio,COCurve);
  }  
  return 0;
}
int  MQGetPercentage(float rs_ro_ratio, float *pcurve){
  return (pow(10,( ((log(rs_ro_ratio)-pcurve[1])/pcurve[2]) + pcurve[0])));
}








float getbatezBestekoa(int n) { // hacemos "n" mediciones 
 float SUMA_n = 0;
 for (int i = 0; i < n; i++) { 
  sensorValue = analogRead(A3); 
  //alternoa DC-ra pasa (errektifikatu)
  if (sensorValue < 248){
    sensorValue = (248-sensorValue) + 248;
  }  
  //sensorValue bariblea 0 eta 255 artean mapeatzea
  sensorValueEskala = map (sensorValue, 248, 490, 0, 255);
   SUMA_n += sensorValueEskala;
 }
 return( SUMA_n /n); // Promedio
}


void CO2()  
{
int co2now[10];                               //int lecturas co2 
int co2raw = 0;                               //int valor raw  co2
int co2comp = 0;                              //int para conpensacion co2 
int co2ppm = 0;                               //int valor en ppm
int zzz = 0;                                  //int para sumar mediciones


  for (int x = 0;x<10;x++){                   //samplpe co2 10x over 2 seconds
    co2now[x]=analogRead(A2);
    delay(200);
  }
  for (int x = 0;x<10;x++){                     //add samples together
    zzz=zzz + co2now[x];    
  }
  co2raw = zzz/10;                            //divide samples by 10
  co2comp = co2raw - co2Zero;                 //get compensated value
  co2ppm = map(co2comp,0,1023,400,1600);      //mapear el valor para ppm
  Serial.print("CO2   ");               //print title
  Serial.println(co2ppm);                      //print co2 ppm
}